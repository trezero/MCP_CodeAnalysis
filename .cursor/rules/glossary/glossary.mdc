---
Description: Rules for the glossary of terms, providing definitions for domain-specific terminology used in the codebase.
Globs: **/*.js, **/*.jsx, **/*.ts, **/*.tsx, **/*.py, **/*.html, **/*.md, **/*.json, **/*.css, **/*.scss, **/*.less, **/*.vue, **/*.svelte
Model: fusion
Context_window: large
Completion_style: documentation
Rule_type: Auto Attached
---
# Glossary of Terms Guidelines

## Purpose
The glossary provides clear, consistent definitions for domain-specific terminology, ensuring shared understanding across the team and reducing miscommunication.

## Implementation

### Glossary Entry Format
Each glossary entry should follow this standard format:

```
Term: [Term Name]
Type: [Class | Function | Method | Component | Concept]
Definition: [Clear, concise definition of the term]
Context: [Where/how the term is used]
Examples: [Code examples showing usage]
Related Terms: [Other glossary terms that relate to this one]
```

### Terminology Usage Guidelines

1. **Consistency**: Use the exact same term for the same concept throughout the codebase
2. **Clarity**: Choose clear, specific terms that accurately convey meaning
3. **Documentation**: Reference glossary terms in comments and documentation
4. **Naming Conventions**:
   - Follow language-specific naming conventions
   - Use consistent casing (camelCase, PascalCase, etc.)
5. **Domain-Specific Language**: Prefer domain terminology over generic terms
6. **Abbreviations**: Only use well-established abbreviations or define them in the glossary

### Maintenance Process

1. New terms should be added to the glossary when they're introduced
2. The glossary should be reviewed regularly to ensure it remains accurate
3. Use automated tools (term_extractor.py, term_usage_analyzer.py) to maintain consistency
4. When renaming terms, update the glossary and all references throughout the codebase

# Glossary Guidelines

- Follow best practices for glossary 
- Ensure consistent standards across the codebase
- Prioritize maintainability and readability
